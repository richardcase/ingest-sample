// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "github.com/richardcase/ingest-sample/pkg/api"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Check provides a mock function with given fields:
func (_m *Repository) Check() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Delete provides a mock function with given fields: pid
func (_m *Repository) Delete(pid int64) error {
	ret := _m.Called(pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: pid
func (_m *Repository) GetByID(pid int64) (*api.Person, error) {
	ret := _m.Called(pid)

	var r0 *api.Person
	if rf, ok := ret.Get(0).(func(int64) *api.Person); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: person
func (_m *Repository) Store(person *api.Person) error {
	ret := _m.Called(person)

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.Person) error); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
